import { Room, User } from '@/db';
import { ApiRequest, PostRequestHandler, writeToLog } from '@/helpers';
import { Fields, Files, IncomingForm } from 'formidable';
import { writeFile, readFile } from 'fs/promises';
import { v4 as uuid } from 'uuid';

interface IncomingDataCreateRoom {}

export interface OutgoingDataCreateRoom {}

export const config = {
    api: { bodyParser: false },
};

interface ParseFormReturn {
    fields: Fields;
    files: Files;
}

const parseForm = (req: ApiRequest<IncomingDataCreateRoom>) =>
    new Promise<ParseFormReturn>((resolve, reject) => {
        const form = new IncomingForm();

        form.parse(req, (err, fields, files) => {
            if (err) {
                reject(err);
            } else {
                resolve({ fields, files });
            }
        });
    });

const handler: PostRequestHandler<IncomingDataCreateRoom, OutgoingDataCreateRoom> = async (req, res) => {
    if (req.method !== 'POST') {
        res.status(405); // method not allowed
        return writeToLog('index', `Request sent to /api/create-room using unallowed method : ${req.method}\n`);
    }

    try {
        const { fields, files } = await parseForm(req);
        const { description, roomname, username } = fields;
        const pfpFile = files.pfp;

        // file can be either File or File[] so making sure its a single file only
        if (!pfpFile || Array.isArray(pfpFile)) {
            res.status(400).json({ token: null });
            return writeToLog('index', 'Multiple files received for pfp from client');
        }

        // client data lost
        if (!pfpFile.originalFilename) {
            res.status(400).json({ token: null });
            return writeToLog('index', 'Original pfp filename lost');
        }

        //          `/media/pfp/${file name generated by browser}.${original file extension}`
        const pfp = `/media/pfp/${pfpFile.newFilename}.${pfpFile.originalFilename.split('.').slice(-1)}`;
        await writeFile(`./public${pfp}`, await readFile(pfpFile.filepath));

        const user = await User.findOne({ where: { username } });

        if (!user) {
            res.status(400).json({});
            return writeToLog('index', 'User not found while creating room');
        }

        const room = await Room.create({
            id: uuid(),
            name: roomname,
            pfp,
            isDM: false,
            description,
        });

        await room.addUser(user);
        res.status(200).json({});
    } catch (err: any) {
        res.status(500).json({ token: null });
        await writeToLog('index', err.message);
    }
};

export default handler;
